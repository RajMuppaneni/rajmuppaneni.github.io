{
  "name": "Rajmuppaneni.GitHub.io",
  "tagline": "Exploration Unlimited",
  "body": "# Solr Workspace Setup Windows\r\n##  Prerequisites\r\n1. [Sign up for Github](https://github.com/)\r\n2. Setup [GitHub Desktop](https://help.github.com/articles/set-up-git/) or [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)\r\n3. Apache Ant [Install & Setup](http://ant.apache.org/manual/index.html)\r\n4. Setup [Apache Ivy](http://ant.apache.org/ivy/history/latest-milestone/tutorial.html)/[Maven](https://maven.apache.org/install.html)\r\n5. If working from behind a firewall, ensure appropriate proxy settings are in place for Git,Ivy,Maven and Ant.\r\n6. Fork [lucene-solr](https://github.com/apache/lucene-solr/) repository\r\n7. Clone your fork to your file system.\r\n8. Eclipse\r\n9. Java 1.8+\r\n\r\n## My Setup\r\n1. Git\r\n2. Apache Ant\r\n3. Apache Ivy\r\n4. Eclipse\r\n5. Java 1.8\r\n6. Windows\r\n\r\n## Getting Started\r\nNavigate to your file system with the content from your fork.   \r\n\r\nlucene/ is a search engine library  \r\nsolr/ is a search engine server that uses lucene    \r\n\r\n1. Setup eclipse by running `ant eclipse`. This will generate the required .project,.classpath and .settings  \r\n2. Ensure the initial and max heap set to a higher number in eclipse.ini  \r\n3. Open eclipse and choose the parent of lucene and solr as workspace location. \r\n4. Import > Existing project into workspace *(be patient as it takes a while to import and build)*  \r\n\r\n##  Debuggersville\r\n**Are you puzzled by solr behvior in some case? then this section is for you.**\r\n\r\n1.  Right click your lucene-solr project and choose `Debug As > Debug Configurations` \r\n2.  Under the `Remote Java Application` category. Click New to create a new debug configuration.  \r\n3.  Give it a name your like to use and setup the port that you would like to use for debugging.  \r\n4.  You should now be able to set breakpoints throughout the Solr/Lucene code base, step through code, and do all the other fun stuff you can do. \r\n\r\n##  Running/Debug Solr Examples \r\n1.  Navigate to /solr directory on your file system \r\n2.  Open build.xml and find the target for `run-example`, ensure the port you choose to debug on is specified in the `example.jvm.line` property as `address`.\r\n3.  If you are looking to debug set system property `-Dexample.debug=true` to enable JVM debugging. (*java -Dexample.debug=true*)\r\n4.  `ant run-example` *(be patient as it takes a while to reveal its magic)*  \r\n5.  In case you are debugging after you see *Listening for transport dt_socket at address: {port_number}* on the command prompt,switch to eclipse and debug using the configuration we setup earlier.\r\n6.  You can navigate to solr-webapp @ localhost:8983/solr/# \r\n\r\n# Have Fun\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}